/**
 * Main window of the app
 * 
 * @author Luis Suárez Lloréns
 */
package classificationgui;

import java.awt.image.BufferedImage;
import java.io.File;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JInternalFrame;
import jmr.result.FloatResult;
import jmr.result.JMRResult;
import jmr.result.ResultList;
import jmr.result.ResultMetadata;
import sri.classification.ClassificationDB;
import sri.classification.ClassifierManager;
import sri.feature.ContourFeature;
import sri.feature.FeatureDB;
import sri.feature.FeatureDBFactory;

public class MainWindow extends javax.swing.JFrame {
    
    /**
     * Mode used to inform that the app is ready for new inputs.
     */
    private static final int READY_MODE = 0;
    /**
     * Mode used to inform that the app is busy.
     */
    private static final int BUSY_MODE = 1;
    
    /**
     * Classifier used to classify the images into concepts.
     */
    private ClassifierManager classifier;
    /**
     * Classification database.
     */
    private ClassificationDB classificationDB = new ClassificationDB();
    /**
     * Feature database.
     */
    private FeatureDB featureDB = new FeatureDB();
    
    /**
     * Creates new form MainWindow.
     */
    public MainWindow() {
        initComponents();
        classifier = new ClassifierManager();
        featureDB = new FeatureDB();
    }

    /**
     * Places the internal frame vi under the active internal frame with the
     * same shape.
     * 
     * @param vi internal frame
     */
    private void locateInternalFrame(JInternalFrame vi) {
        JInternalFrame vSel = desktopPanel.getSelectedFrame();
        if (vSel != null) {
            vi.setLocation(vSel.getX() + 20, vSel.getY() + 20);
            vi.setSize(vSel.getSize());
        }
    }
    
    /**
     * Shows the internal frame vi.
     * 
     * @param vi internal frame
     */
    private void showInternalFrame(JInternalFrame vi) {
        this.locateInternalFrame(vi);
        this.desktopPanel.add(vi);
        vi.setVisible(true);
    }  
    
    /**
     * Loads an image.
     * 
     * @param path path to the image
     * 
     * @return BufferedImage from the path 
     */
    private BufferedImage loadImage(String path){
        BufferedImage img = null;
        
        try {
            File f = new File(path);
            img = ImageIO.read(f);
        } catch (Exception ex) {
            //TODO: Excepcion
        }
        
        return img;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        featurePopupMenu = new javax.swing.JPopupMenu();
        CurvatureButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        CurvacityButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonPanel = new javax.swing.JPanel();
        openToolBar = new javax.swing.JToolBar();
        openImageButton = new javax.swing.JButton();
        openDBButton = new javax.swing.JButton();
        classificationSearchToolBar = new javax.swing.JToolBar();
        queryText = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        configurationToolBar = new javax.swing.JToolBar();
        configurationButton = new javax.swing.JButton();
        descriptorToolBar = new javax.swing.JToolBar();
        computeDescriptorButton = new javax.swing.JButton();
        computeClassificationButton = new javax.swing.JButton();
        compareButton = new javax.swing.JButton();
        activeClassificationDBButton = new javax.swing.JButton();
        activeDescriptorDBButton = new javax.swing.JButton();
        desktopPanel = new javax.swing.JDesktopPane();
        statusPanel = new javax.swing.JPanel();
        statusLabel = new java.awt.Label();
        dbUsedLabel = new java.awt.Label();

        buttonGroup1.add(CurvatureButtonMenuItem);
        CurvatureButtonMenuItem.setText("Curvatura");
        featurePopupMenu.add(CurvatureButtonMenuItem);

        buttonGroup1.add(CurvacityButtonMenuItem);
        CurvacityButtonMenuItem.setSelected(true);
        CurvacityButtonMenuItem.setText("Curvacidad");
        featurePopupMenu.add(CurvacityButtonMenuItem);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Aplicación de Clasificación Automática");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setName("mainWindow"); // NOI18N

        buttonPanel.setPreferredSize(new java.awt.Dimension(816, 40));

        openToolBar.setRollover(true);

        openImageButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/OpenFile.png"))); // NOI18N
        openImageButton.setFocusable(false);
        openImageButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        openImageButton.setMaximumSize(new java.awt.Dimension(30, 30));
        openImageButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        openImageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openImageButtonActionPerformed(evt);
            }
        });
        openToolBar.add(openImageButton);

        openDBButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Database.png"))); // NOI18N
        openDBButton.setFocusable(false);
        openDBButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        openDBButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        openDBButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openDBButtonActionPerformed(evt);
            }
        });
        openToolBar.add(openDBButton);

        classificationSearchToolBar.setRollover(true);

        queryText.setEnabled(false);
        queryText.setMinimumSize(new java.awt.Dimension(100, 27));
        queryText.setPreferredSize(new java.awt.Dimension(300, 27));
        queryText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                queryTextActionPerformed(evt);
            }
        });
        classificationSearchToolBar.add(queryText);

        searchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Search.png"))); // NOI18N
        searchButton.setEnabled(false);
        searchButton.setFocusable(false);
        searchButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        searchButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });
        classificationSearchToolBar.add(searchButton);

        configurationToolBar.setRollover(true);

        configurationButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Settings.png"))); // NOI18N
        configurationButton.setFocusable(false);
        configurationButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        configurationButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        configurationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                configurationButtonActionPerformed(evt);
            }
        });
        configurationToolBar.add(configurationButton);

        descriptorToolBar.setRollover(true);

        computeDescriptorButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/CompFeature.png"))); // NOI18N
        computeDescriptorButton.setComponentPopupMenu(featurePopupMenu);
        computeDescriptorButton.setFocusable(false);
        computeDescriptorButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        computeDescriptorButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        computeDescriptorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                computeDescriptorButtonActionPerformed(evt);
            }
        });
        descriptorToolBar.add(computeDescriptorButton);

        computeClassificationButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/CompCategory.png"))); // NOI18N
        computeClassificationButton.setFocusable(false);
        computeClassificationButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        computeClassificationButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        computeClassificationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                computeClassificationButtonActionPerformed(evt);
            }
        });
        descriptorToolBar.add(computeClassificationButton);

        compareButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Compare.png"))); // NOI18N
        compareButton.setEnabled(false);
        compareButton.setFocusable(false);
        compareButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        compareButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        compareButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compareButtonActionPerformed(evt);
            }
        });
        descriptorToolBar.add(compareButton);

        activeClassificationDBButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/CompCategory.png"))); // NOI18N
        activeClassificationDBButton.setEnabled(false);

        activeDescriptorDBButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/CompFeature.png"))); // NOI18N
        activeDescriptorDBButton.setEnabled(false);

        javax.swing.GroupLayout buttonPanelLayout = new javax.swing.GroupLayout(buttonPanel);
        buttonPanel.setLayout(buttonPanelLayout);
        buttonPanelLayout.setHorizontalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonPanelLayout.createSequentialGroup()
                .addComponent(openToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(configurationToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(descriptorToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(classificationSearchToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 174, Short.MAX_VALUE)
                .addComponent(activeDescriptorDBButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(activeClassificationDBButton))
        );
        buttonPanelLayout.setVerticalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonPanelLayout.createSequentialGroup()
                .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(descriptorToolBar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(openToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(classificationSearchToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(configurationToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(activeClassificationDBButton)
                    .addComponent(activeDescriptorDBButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(buttonPanel, java.awt.BorderLayout.PAGE_START);

        desktopPanel.setBackground(java.awt.Color.gray);

        javax.swing.GroupLayout desktopPanelLayout = new javax.swing.GroupLayout(desktopPanel);
        desktopPanel.setLayout(desktopPanelLayout);
        desktopPanelLayout.setHorizontalGroup(
            desktopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 924, Short.MAX_VALUE)
        );
        desktopPanelLayout.setVerticalGroup(
            desktopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 480, Short.MAX_VALUE)
        );

        getContentPane().add(desktopPanel, java.awt.BorderLayout.CENTER);

        statusPanel.setPreferredSize(new java.awt.Dimension(924, 20));

        statusLabel.setText("Modo: Preparado ");

        dbUsedLabel.setText("Base de datos:");

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, statusPanelLayout.createSequentialGroup()
                .addComponent(dbUsedLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 438, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 370, Short.MAX_VALUE)
                .addComponent(statusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dbUsedLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(statusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 1, Short.MAX_VALUE))
        );

        getContentPane().add(statusPanel, java.awt.BorderLayout.PAGE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        String query = this.queryText.getText();
        
        ResultList results = classificationDB.search(query);

        ResultList resultList = new ResultList();

        for(JMRResult result: results){

            ResultMetadata myResult = (ResultMetadata) result;

            float value = ((FloatResult) myResult.getResult()).getValue();
            FloatResult resultValue = new FloatResult(1-value);
            String path = (String) myResult.getMetadata();

            resultList.add(new ResultMetadata(resultValue, loadImage(path)));
        }

        resultList.sort();
        ResultFrame vi = new ResultFrame(this,resultList);
        vi.setTitle("Consulta: "+query);
        this.showInternalFrame(vi);

    }//GEN-LAST:event_searchButtonActionPerformed

    private void queryTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_queryTextActionPerformed
        searchButtonActionPerformed(evt);
    }//GEN-LAST:event_queryTextActionPerformed

    private void openImageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openImageButtonActionPerformed

        JFileChooser dlg = new JFileChooser();

        int resp = dlg.showOpenDialog(this);
        if (resp == JFileChooser.APPROVE_OPTION) {
            try {
                File f = dlg.getSelectedFile();

                if (f != null) {
                    ImageFrame vi = new ImageFrame(this, f.getAbsolutePath());
                    vi.setTitle(f.getName());
                    this.showInternalFrame(vi);
                }
            } catch (Exception ex) {
                //TODO: Salida expection
            }
        }

    }//GEN-LAST:event_openImageButtonActionPerformed

    private void openDBButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openDBButtonActionPerformed
        JFileChooser dlg = new JFileChooser();

        int resp = dlg.showOpenDialog(this);
        if (resp == JFileChooser.APPROVE_OPTION) {
            try {
                File f = dlg.getSelectedFile();
                String absolutePath = f.getAbsolutePath();
                
                if (absolutePath.endsWith(".sridb")){
                    
                    setClassificationDB(absolutePath);
                }
                else if (absolutePath.endsWith(".featdb")){
                    setFeatureDB(absolutePath);
                }
            } catch(Exception ex){
                
            }
        }   

    }//GEN-LAST:event_openDBButtonActionPerformed

    private void configurationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_configurationButtonActionPerformed
        // TODO launch dialog to configure the app.
    }//GEN-LAST:event_configurationButtonActionPerformed

    private void computeClassificationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_computeClassificationButtonActionPerformed
        ImageFrame selectedImageFrame = (ImageFrame) desktopPanel.getSelectedFrame();
        String path = selectedImageFrame.path;
        
        setStatusLabel(MainWindow.BUSY_MODE);
        
        ClassificationFrame vi = new ClassificationFrame(this,path,classifier);
        vi.setTitle(selectedImageFrame.getTitle() + " - Clasificación");
        
        setStatusLabel(MainWindow.READY_MODE);
        
        this.showInternalFrame(vi);
    }//GEN-LAST:event_computeClassificationButtonActionPerformed

    private void compareButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compareButtonActionPerformed
        GraphInternalFrame selectedGraphFrame = (GraphInternalFrame) desktopPanel.getSelectedFrame();
        ContourFeature selectedFeature = selectedGraphFrame.getContourFeature();
        
        ResultList results = featureDB.search(selectedFeature);
        ResultList resultList = new ResultList();
        
        for(JMRResult result: results){

            ResultMetadata myResult = (ResultMetadata) result;

            float value = ((FloatResult) myResult.getResult()).getValue();
            FloatResult resultValue = new FloatResult(value);
            String path = (String) myResult.getMetadata();

            resultList.add(new ResultMetadata(resultValue, loadImage(path)));
        }
        
        resultList.sort();
        
        ResultFrame vi = new ResultFrame(this,resultList);
        vi.setTitle(selectedGraphFrame.getTitle() + " - Consulta");
        this.showInternalFrame(vi);
    }//GEN-LAST:event_compareButtonActionPerformed

    private void computeDescriptorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_computeDescriptorButtonActionPerformed
        ImageFrame selectedImageFrame = (ImageFrame) desktopPanel.getSelectedFrame();
        String path = selectedImageFrame.path;
        
        setStatusLabel(MainWindow.BUSY_MODE);
        
        int mode = -1;
        
        if (this.CurvatureButtonMenuItem.isSelected()){
            mode = FeatureDBFactory.CURVATURE_MODE;
        }
        else if (this.CurvacityButtonMenuItem.isSelected()){
            mode = FeatureDBFactory.CURVACITY_MODE;
        }
        
        FeatureDBFactory factory = new FeatureDBFactory();
        ContourFeature cf = factory.createContourFeature(path, mode);
        
        GraphInternalFrame vi = new GraphInternalFrame(this,cf);
        vi.setTitle(selectedImageFrame.getTitle() + " - Descriptor");
        
        setStatusLabel(MainWindow.READY_MODE);
        
        this.showInternalFrame(vi);
    }//GEN-LAST:event_computeDescriptorButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButtonMenuItem CurvacityButtonMenuItem;
    private javax.swing.JRadioButtonMenuItem CurvatureButtonMenuItem;
    private javax.swing.JButton activeClassificationDBButton;
    private javax.swing.JButton activeDescriptorDBButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JToolBar classificationSearchToolBar;
    private javax.swing.JButton compareButton;
    private javax.swing.JButton computeClassificationButton;
    private javax.swing.JButton computeDescriptorButton;
    private javax.swing.JButton configurationButton;
    private javax.swing.JToolBar configurationToolBar;
    private java.awt.Label dbUsedLabel;
    private javax.swing.JToolBar descriptorToolBar;
    private javax.swing.JDesktopPane desktopPanel;
    private javax.swing.JPopupMenu featurePopupMenu;
    private javax.swing.JButton openDBButton;
    private javax.swing.JButton openImageButton;
    private javax.swing.JToolBar openToolBar;
    private javax.swing.JTextField queryText;
    private javax.swing.JButton searchButton;
    private java.awt.Label statusLabel;
    private javax.swing.JPanel statusPanel;
    // End of variables declaration//GEN-END:variables

    /**
     * Sets the DB to use.
     * @param absolutePath path to the DB
     */
    private void setClassificationDB(String absolutePath) {
        classificationDB.load(absolutePath);
        this.dbUsedLabel.setText("Base de datos: "+absolutePath);
        this.activeClassificationDBButton.setEnabled(true);
        this.activeDescriptorDBButton.setEnabled(false);
        
        this.searchButton.setEnabled(true);
        this.queryText.setEnabled(true);
        
        this.compareButton.setEnabled(false);
    }
    
    /**
     * Sets the DB to use.
     * @param absolutePath path to the DB
     */
    private void setFeatureDB(String absolutePath) {
        featureDB.load(absolutePath);
        this.dbUsedLabel.setText("Base de datos: "+absolutePath);
        this.activeClassificationDBButton.setEnabled(false);
        this.activeDescriptorDBButton.setEnabled(true);
        
        this.searchButton.setEnabled(false);
        this.queryText.setEnabled(false);
        
        this.compareButton.setEnabled(true);
    }

    private void setStatusLabel(int mode) {
        if (mode == MainWindow.READY_MODE){
            this.statusLabel.setText("Modo: Preparado ");
        }
        else if (mode == MainWindow.BUSY_MODE){
            this.statusLabel.setText("Modo: Calculando");
        }
    }
}
